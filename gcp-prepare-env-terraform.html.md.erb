---
title: Preparing to Deploy PCF on GCP with Terraform
owner: Ops Manager
---

<strong><%= modified_date %></strong>
<html class="list-style-none"></html>

This guide describes the preparation steps required to install Pivotal Cloud Foundry (PCF) on Google Cloud Platform (GCP) using Terraform templates. 

The Terraform template for PCF on GCP describes a set of GCP resources and properties. For more information about how Terraform creates resources in GCP, see the [Google Cloud Provider](https://www.terraform.io/docs/providers/google/index.html) topic on the Terraform site. 

You may also find it helpful to review different deployment options in the [Reference Architecture for Pivotal Cloud Foundry on GCP](../refarch/gcp/gcp_ref_arch.html).

## <a id="prereqs"></a>Prerequisites ##

In addition to fulfilling the prerequisites listed in the [Installing Pivotal Cloud Foundry on GCP](./gcp.html) topic, ensure you have the following: 

* Terraform CLI
* gcloud CLI
* In your GCP project, enable the following APIs: 
  * [Identity and Access Management](https://console.developers.google.com/apis/api/iam.googleapis.com)
  * [Cloud Resource Manager](https://console.developers.google.com/apis/api/cloudresourcemanager.googleapis.com/)
  * [Cloud DNS](https://console.developers.google.com/apis/api/dns/overview)
  * [Cloud SQL API](https://console.developers.google.com/apis/api/sqladmin/overview)

## <a id="svc-key"></a>Step 1: Obtain a GCP Service Account Key File ##

To use the Terraform templates to create the necessary infrastructure resources for PCF, you need a service account key file. Follow the procedure that corresponds to your use case: 

* **I already have a service account I want to use**
  1. Navigate to the GCP console
  1. Select **IAM** and locate your service account. 
  1. From the **Options** column, open the dropdown menu and click **Create Key**. 
* **I want to create a new service account**
  1. Open a terminal window. 
  1. Create a service account using the gcloud CLI:
    <pre class="terminal">$ gcloud iam service-accounts create ACCOUNT-NAME</pre>
  1. Create a key file for your service account:
    <pre class="terminal">$ gcloud iam service-accounts keys create "terraform.key.json" --iam-account "some-account-name@yourproject.iam.gserviceaccount.com"</pre>
  1. Bind the service account to your project and give it the owner role:
    <pre class="terminal">$ gcloud projects add-iam-policy-binding PROJECT_ID --member 'serviceAccount:some-account-name@PROJECT_ID.iam.gserviceaccount.com' --role 'roles/owner'</pre>  

## <a id="download"></a>Step 2: Download and Edit the Terraform Variables File ##

Before you can run Terraform commands to create infrastructure resources, you must fill out a template variables file. 

1. Navigate to the Pivotal Application Service (PAS) release on [Pivotal Network](https://network.pivotal.io). 

1. Download the GCP Terraform zip file. 

1. Extract the contents of the zip file and place the `terraforming-gcp` folder in your `workspace` directory on your local machine.  

1. From a terminal window, navigate to the folder:
  <pre class="terminal">$ cd ~/workspace/terraforming-gcp</pre>

1. Create a new file named `terraform.tfvars`. 
  <pre class="terminal">$ touch terraform.tfvars</pre>

1. Open the `terraform.tfvars` file and paste in the following contents:

    ```
    env_name         = "YOUR-ENVIRONMENT-NAME"
    region           = "YOUR-GCP-REGION"
    opsman_image_url = "YOUR-OPS-MAN-IMAGE-URL"
    zones            = ["YOUR-AZ-1", "YOUR-AZ-2", "YOUR-AZ-3"]
    project          = "YOUR-GCP-PROJECT"
    dns_suffix       = "YOUR-SYSTEM-DOMAIN"

    ssl_cert = <<SSL_CERT
    -----BEGIN CERTIFICATE-----
    YOUR-CERTIFICATE
    -----END CERTIFICATE-----
    SSL_CERT

    ssl_cert_private_key = <<SSL_KEY
    -----BEGIN RSA PRIVATE KEY-----
    YOUR-PRIVATE-KEY
    -----END RSA PRIVATE KEY-----
    SSL_KEY

    service_account_key = <<SERVICE_ACCOUNT_KEY
    YOUR-KEY-JSON
    SERVICE_ACCOUNT_KEY
    ```

1. Edit the values in the file according to the table below:
  <table>
    <tr>
      <th style="width: 35%">Value to replace</th>
      <th>Guidance</th>
    </tr>
    <tr>
      <td><code>YOUR-ENVIRONMENT-NAME</code></td>
      <td>Enter a name to use to identify resources in GCP. Terraform prepends the names of the resources it creates with this environment name. Example: <code>pcf</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-GCP-REGION</code></td>
      <td>Enter the name of the GCP region in which you want Terraform to create resources. Example: <code>us-central1</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-OPS-MAN-IMAGE-URL</code></td>
      <td>Enter the source URL of the Ops Manager image you want to boot. You can find this URL in the PDF included with the Ops Manager release on <a href="https://network/pivotal.io/">Pivotal Network</a>. Example: <code>http<span>s</span>://storage.googleapis.com/ops-manager-us/pcf-gcp-1.12.0.tar.gz</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-AZ-1<br>YOUR-AZ-2<br>YOUR-AZ-3</code></td>
      <td>Enter three availability zones from your region. Example: <code>us-central1-a</code>, <code>us-central1-b</code>, <code>us-central1-c</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-GCP-PROJECT</code></td>
      <td>Enter the name of the GCP project in which you want Terraform to create resources.</td>
    </tr>
    <tr>
      <td><code>YOUR-SYSTEM-DOMAIN</code></td>
      <td>Enter a domain name to use as the system domain for your PCF deployment. Terraform creates DNS records in GCP using `YOUR-ENVIRONMENT-NAME` and `YOUR-SYSTEM-DOMAIN`. For example, if you enter <code>example.com</code> for your system domain and have <code>pcf</code> as your environment name, Terraform will create DNS records at <code>pcf.example.com</code>.</td>
    </tr>
    <tr>
      <td><code>YOUR-CERTIFICATE</code></td>
      <td>Enter a certificate to use for HTTP load balancing. For production environments, use a certificate from a Certificate Authority (CA). For test environments, you can use a self-signed certificate. 

      <p class="note"><strong>Note</strong>: Your certificate must specify <code>YOUR-SYSTEM-DOMAIN</code> as the common name. It also must include the following subdomains: <code>*.sys.example.com</code>, <code>*.login.sys.example.com</code>, <code>*.uaa.sys.example.com</code>, <code>*.apps.example.com</code>.</p></td>
    </tr>
    <tr>
      <td><code>YOUR-PRIVATE-KEY</code></td>
      <td>Enter a private key for the certificate you entered.</td>
    </tr>
    <tr>
      <td><code>YOUR-KEY-JSON</code></td>
      <td>Enter the contents of your service account key file. This file is in JSON format.</td>
    </tr>
  </table>

## <a id="download"></a>Step 3: Add Optional Variables ##

Complete this step if you want plan to deploy the Isolation Segment tile, use an external Google Cloud SQL database, or use external Google Storage buckets for your PCF deployment. In your `terraform.tfvars` file, specify the appropriate variables from the sections below.

### <a id="iso_seg"></a> Isolation Segments

If you plan to deploy the Isolation Segment tile, add the following variables to your `terraform.tfvars` file, replacing `YOUR-CERTIFICATE` and `YOUR-PRIVATE-KEY` with a certificate and private key. This causes terraform to create an additional HTTP load balancer across three availability zones to use for the Isolation Segment tile. 

```
isolation_segment: true
iso_seg_ssl_cert = <<ISO_SEG_SSL_CERT
-----BEGIN CERTIFICATE-----
YOUR-CERTIFICATE
-----END CERTIFICATE-----
ISO_SEG_SSL_CERT
iso_seg_ssl_cert_private_key = <<ISO_SEG_SSL_KEY
-----BEGIN RSA PRIVATE KEY-----
YOUR-PRIVATE-KEY
-----END RSA PRIVATE KEY-----
ISO_SEG_SSL_KEY
```

### <a id="cloudsql"></a> External Database

1. If you want to use an external Google Cloud SQL database for Ops Manager and Elastic Runtime, add the following to your `terraform.tfvars` file: 

    ```
    external_database: true
    ```

1. If you want to specify a single host from which users can connect to the Ops Manger and Elastic Runtime database, add the following variables to your `terraform.tfvars` file. Replace `HOST_IP_ADDRESS` with your desired IP addresses. 

    ```
    opsman_sql_db_host: HOST_IP_ADDRESS
    ert_sql_db_host: HOST_IP_ADDRESS
    ```

### <a id="gcs"></a> External Storage Buckets

If you want to use Google Cloud Storage buckets for the Elastic Runtime Cloud Controller, add the following to your `terraform.tfvars` file:

```
ert_sql_db_host: true
``` 

## <a id="download"></a>Step 4: Create GCP Resources with Terraform ##

Follow these steps to use the Terraform CLI to create resources on GCP:

1. From `terraforming-gcp` directory, run the following command to initialize the directory based on the information you specified in the `terraform.tfvars` file. 
  <pre class="terminal">$ terraform init</pre>

1. Run the following command. It may take several minutes for Terraform to create all the resources in GCP. 
  <pre class="terminal">$ terraform apply</pre>

## <a id="next"></a> What to Do Next ##

Proceed to the next step in the deployment, [Launching an Ops Manager Director Instance on GCP](./gcp-om-deploy.html). 

