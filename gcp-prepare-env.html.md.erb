---
title: Preparing to Deploy PCF on GCP
owner: Ops Manager
---

<strong><%= modified_date %></strong>
<html class="list-style-none"></html>

This guide describes the preparation steps required to install Pivotal Cloud Foundry (PCF) on Google Cloud Platform (GCP).

In addition to fulfilling the prerequisites listed in the [Installing Pivotal Cloud Foundry on GCP](./gcp.html) topic, you must create resources in GCP such as a new network, firewall rules, load balancers, and a service account before deploying PCF. Follow these procedures to prepare your GCP environment. 

When deploying PCF on GCP, Pivotal recommends using the following GCP components:

  * [Google Cloud SQL](https://cloud.google.com/sql/docs/) for external Elastic Runtime database services
  * [NAT Gateway Instances](https://cloud.google.com/solutions/connecting-securely#natgateway) to limit the number of VMs with public IP addresses
  * [Google Cloud Storage](https://cloud.google.com/storage/) for external filestorage in Elastic Runtime

For more information, review the different deployment options and recommendations in the [Reference Architecture for Pivotal Cloud Foundry on GCP](../refarch/gcp/gcp_ref_arch.html). 

## <a id="iam_account"></a>Step 1: Set up an IAM Service Account ##

1. From the GCP Console, select **IAM & Admin**, then **Service accounts**. 
1. Click **Create Service Account**: 
  * **Service account name**: Enter a name. For example, `bosh`.
  * **Role**: Select the following roles for the service account:
     <p class="note">You must scroll down in the pop-up windows to select all required roles.</p>
     * **Project** > **Service Account Actor** 
     * **Compute Engine** > **Compute Instance Admin**
     * **Compute Engine** > **Compute Network Admin**
     * **Compute Engine** > **Compute Storage Admin**
     * **Storage** > **Storage Admin**
     <p class="note">The **Service Account Actor** role is only required if you plan to use [**The Ops Manager VM Service Account**](./gcp-om-config.html#gcp-config) to deploy Ops Manager.</p>
  * **Service account ID**: The field automatically generates a unique ID based on the username. 
  * **Furnish a new private key**: Select this checkbox and JSON as the **Key type**.
    <%= image_tag("gcp/iam_account.png") %>

1. Click **Create**. Your browser automatically downloads a JSON file with a private key for this account. Save this file in a secure location.

## <a id="enable_compute_resource_api"></a>Step 2: Enable Google Cloud APIs ##

Ops Manager manages GCP resources using the Google Compute Engine and Cloud Resource Manager APIs. To enable these APIs, perform the following steps:

1. Log in to the Google Developers console at [https://console.developers.google.com](https://console.developers.google.com).

1. In the console, navigate to the GCP project where you want to install PCF. 

1. Select **API Manager > Library**.

1. Under **Google Cloud APIs**, select **Compute Engine API**.

1. On the **Google Compute Engine API** page, click **Enable**.

1. In the search field, enter `Google Cloud Resource Manager API`. 

1. On the **Google Cloud Resource Manager API** page, click **Enable**.

1. To verify that the APIs have been enabled, perform the following steps:
    1. Log in to GCP using the IAM service account you created in [Set up an IAM Service Account](#iam_account):
     <pre class="terminal">
     $ gcloud auth activate-service-account --key-file JSON\_KEY\_FILENAME
     </pre>

  1. List your projects:
    <pre class="terminal">
    $ gcloud projects list
    PROJECT\_ID       NAME                 PROJECT\_NUMBER
    my-project-id    my-project-name      ##############
    </pre>
    
    This command lists the projects where you enabled Google Cloud APIs.

## <a id="create_network"></a>Step 3: Create a GCP Network with Subnets ##

1. Log in to the [GCP Console](https://console.cloud.google.com/).
 
1. Navigate to the GCP project where you want to install PCF. 

1. Select **VPC network**, then **CREATE VPC NETWORK**.
  ![Create VPC Network](gcp/gcp-vpc-networks.png)
1. In the **Name** field, enter `MY-PCF-virt-net`.<br>
     `MY-PCF` is a prefix to help you identify resources for this PCF deployment in the GCP console. 
     ![Enter VPC Name](gcp/gcp-vpc-name.png)
  1. Under **Subnets** complete the form as follows:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-infrastructure-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>A region that supports three availability zones. For help selecting the correct region for your deployment, see the [Google documentation on regions and zones](https://cloud.google.com/compute/docs/regions-zones/regions-zones).</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR ending in `/26`</td>
        </tr>
      </table><br>
      See the following image for an example:
      ![Create VPC Subnet](gcp/gcp-vpc-subnet.png)
    1. Click **Add subnet** to add a second subnet with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-ert-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the infrastructure subnet</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR ending in `/22`<br>
            Example: `192.168.16.0/22`</td>
        </tr>
      </table><br>
    1. Click **Add subnet** to add a third **Subnet** with the following details:
      <table>
        <tr>
          <th style="width:25%">Name</th>
          <td><code>MY-PCF-subnet-services-MY-GCP-REGION</code></td>
        </tr>
        <tr>
          <th>Region</th>
          <td>The same region you selected for the previous subnets</td>
        </tr>
        <tr>
        <th>IP address range</th>
        <td>A CIDR in `/22`<br>
            Example: `192.168.20.0/22`</td>
        </tr>
      </table><br>
      See the following image for an example:
      ![Subnetworks Example](gcp/vpc_subnetworks.png) 

1. Under **Dynamic routing mode**, leave **Regional** selected.

1. Click **Create**.

## <a id="create_nat"></a>Step 4: Create NAT Instances ##

Use NAT instances when you want to expose only a minimal number of public IP addresses. 

For more information, see the [Reference Architecture for Pivotal Cloud Foundry on GCP](../refarch/gcp/gcp_ref_arch.html#common_network) and [GCP documentation](https://cloud.google.com/solutions/connecting-securely#natgateway).

1. In the console, navigate to **Compute Engine** > **VM instances**. 
  ![Compute Instance](gcp/gcp-vm-instances.png)

1. Click **CREATE INSTANCE**. 
  ![Create Instance](gcp/gcp-vm-create.png)

1. Complete the following fields:
  * **Name**: Enter `MY-PCF-nat-gateway-pri`. <br>
    This is the first, or primary, of three NAT instances you need. 
  * **Zone**: Select the first zone from your region.<br>
    Example: For region `us-west1`, select zone `us-west1-a`.
  * **Machine type**: Select `n1-standard-4`.
  * **Boot disk**: Click **Change** and select `Ubuntu 14.04 LTS`. 
  <br>
  ![Primary Nat Example](gcp/gcp-primary-nat.png) 

1. Expand the additional configuration fields by clicking **Management, disks, networking, SSH keys**.   
  ![Management dropdown](gcp/gcp-nat-dropdown.png)
  1. In the **Startup script** field under **Automation**, enter the following text: 
      <code>#! /bin/bash<br>
      sudo sh -c 'echo 1 > /proc/sys/net/ipv4/ip_forward'<br>
      sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code>
      ![Startup Script](gcp/gcp-nat-startup.png)

1. Click **Networking** to open additional network configuration fields:
  ![NAT Networking settings](gcp/gcp-nat-network.png) 
    1. In the **Network tags** field, add the following: `nat-traverse` and `MY-PCF-nat-instance`. 
    1. Click the pencil icon to edit the **Network interface**. 
    1. For **Network**, select `MY-PCF-virt-net`. You created this network in [Step 1: Create a GCP Network with Subnets](#create-net).
    1. For **Subnetwork**, select `MY-PCF-subnet-infrastructure-MY-GCP-REGION`.
    1. For **Primary internal IP**, select `Ephemeral (Custom)`. Enter an IP address (for example, `192.168.101.2`) in the **Custom ephemeral IP address** field. Specify an internal IP address located within the reserved IP range that you will [configure in Ops Manager Director](./gcp-om-config.html#network). Do not use the **Gateway** IP, for example `192.168.101.1`.
    1. For **External IP**, select `Ephemeral`.
    <p class="note"><strong>Note</strong>: If you select a static external IP address for the NAT instance, then you can use the static IP to further secure access to your CloudSQL instances.</p>
    1. Set **IP forwarding** to `On`. 
    1. Click **Done**.

1. Click **Create** to finish creating the NAT instance.

1. Repeat steps 2-6 to create two additional NAT instances with the names and zones specified in the table below. The rest of the configuration remains the same. 
    <table>
    <tr>
      <th>Instance 2</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-gateway-sec</code>.<br>
        <b>Zone</b>: Select the second zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-b</code>.<br>
        <b>Internal IP</b>: Select <code>Custom</code> and enter an IP address (for example, <code>192.168.101.3</code>) in the <b>Internal IP address</b> field. Specify an internal IP address located within the reserved IP range that you will [configure in Ops Manager Director](./gcp-om-config.html#network). Do not use the **Gateway** IP, for example `192.168.101.1`.
      </td>
    </tr>
    <tr>
      <th>Instance 3</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-gateway-ter</code>.<br>
        <b>Zone</b>: Select the third zone from your region.<br>
        Example: For region <code>us-west1</code>, select zone <code>us-west1-c</code>.
        <br>
        <b>Internal IP</b>: Select <code>Custom</code> and enter an IP address (for example, <code>192.168.101.4</code>) in the <b>Internal IP address</b> field. Specify an internal IP address located within the reserved IP range that you will [configure in Ops Manager Director](./gcp-om-config.html#network). Do not use the **Gateway** IP, for example `192.168.101.1`.
      </td>
    </tr>
    </table>

### <a id="nat-routes"></a>Create Routes for NAT Instances

1. In the GCP console, navigate to **VPC Networks** > **Routes**. 
  ![NAT Routes](gcp/gcp-vpc-routes.png)

1. Click **CREATE ROUTE**. 

1. Complete the form as follows:
  * **Name**: `MY-PCF-nat-pri`
  * **Network**: `MY-PCF-virt-net`
  * **Destination IP range**: `0.0.0.0/0`
  * **Priority**: `800`
  * **Instance tags**: `MY-PCF`
  * **Next hop**: `Specify an instance`
  * **Next hop instance**: `MY-PCF-nat-gateway-pri`

1. Click **Create** to finish creating the route. 

1. Repeat steps 2-4 to create two additional routes with the names and next hop instances specified in the table below. The rest of the configuration remains the same. 
  <table>
    <tr>
      <th>Route 2</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-sec</code><br>
        <b>Next hop instance</b>: <code>MY-PCF-nat-gateway-sec</code>
      </td>
    </tr>
    <tr>
      <th>Route 3</th>
      <td>
        <b>Name</b>: <code>MY-PCF-nat-ter</code><br>
        <b>Next hop instance</b>: <code>MY-PCF-nat-gateway-ter</code>
      </td>
    </tr>
    </table>

## <a id="firewall_rules"></a>Step 5: Create Firewall Rules for the Network

GCP lets you assign [tags](https://cloud.google.com/compute/docs/label-or-tag-resources#tags) to virtual machine (VM) instances and create firewall rules that apply to VMs based on their tags. This step assigns tags and firewall rules to Ops Manager components and VMs that handle incoming traffic. 

1. In the **Networking** pane, select **Firewall rules**. 

1. Create firewall rules according to the table below: 
  <p class="note"><strong>Note</strong>: If you want your firewalls rules to only allow traffic within your private network, modify the <b>Source IP Ranges</b> from the table accordingly.</p>
  <table>
  <tr><th colspan="2" style="text-align: center;">Firewall Rules</th></tr>
   <tr>
    <tr>
      <th>Rule 1</th>
      <td>
        This rule allows SSH from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ssh</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:22</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-ssh</code>
      </td>
    </tr>
    <tr>
      <th>Rule 2</th>
      <td>
        This rule allows HTTP from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-http</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:80</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-http</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 3</th>
      <td>
        This rule allows HTTPS from public networks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-https</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:443</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>allow-https</code>, <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 4</th>
      <td>
        This rule allows Gorouter health checks.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-http-8080</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:8080</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP Ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Target tags</b>: <code>router</code>
      </td>
    </tr>
    <tr>
      <th>Rule 5</th>
      <td>
        This rule allows communication between BOSH-deployed ERT jobs.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ert-all</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp;udp;icmp</code><br>
        <b>Source filter</b>: Source tags<br>
        <b>Target tags</b>: <code>MY-PCF</code>, <code>MY-PCF-opsman</code>, <code>nat-traverse</code><br>
        <b>Source tags</b>: <code>MY-PCF</code>, <code>MY-PCF-opsman</code>, <code>nat-traverse</code>
      </td>
    </tr>
    <tr>
      <th>Rule 6 (Optional)</th>
      <td>
        This rule allows access to the TCP router.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-cf-tcp</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:1024-65535</code><br>
        <b>Target tags</b>: <code>MY-PCF-cf-tcp</code>
      </td>
    </tr>
    <tr>
      <th>Rule 7 (Optional)</th>
      <td>
        This rule allows access to the SSH proxy.<br><br>
        <b>Name</b>: <code>MY-PCF-allow-ssh-proxy</code><br>
        <b>Network</b>: <code>MY-PCF-virt-net</code><br>
        <b>Source filter</b>: IP ranges<br>
        <b>Source IP ranges</b>: <code>0.0.0.0/0</code><br>
        <b>Allowed protocols and ports</b>: <code>tcp:2222</code><br>
        <b>Target tags</b>: <code>MY-PCF-ssh-proxy</code>, <code>diego-brain</code><br>
      </td>
    </tr>
  </table>
1. If you are only using your GCP project to deploy PCF, then you can delete the following default firewall rules:
   * `default-allow-http`
   * `default-allow-https`
   * `default-allow-icmp`
   * `default-allow-internal`
   * `default-allow-rdp`
   * `default-allow-ssh`


## <a id="dbs"></a>Step 6: Create Database Instance and Databases ##

### Create Database Instance  

1. From the GCP Console, select **SQL** and click **CREATE INSTANCE**. 
1. Ensure **MySQL** is selected and click **Next**. 
1. Click **Choose Second Generation**. 
1. Configure the instance as follows:
  * **Instance ID**: `MY-PCF-ert-sql`
  * **Root password**: Set a password for the root user.
  * **Region**: Select the region you specified when creating networks.
  * **Zone**: `Any`. 
  * **Configure machine type and storage**: Select `db-n1-standard-2`.
  * **Enable auto backups and high availability**: Make the following selections:
     * Leave **Automate backups** and **Enable binary logging** selected. 
     * Under **High availability**, select the **Create failover replica** checkbox. 
  * **Authorize Networks**: Click **Add network** and create a network named `all` that allows traffic from `0.0.0.0/0`. 
  <p class="note"><strong>Note</strong>: If you assigned static IP addresses to your NAT instances, you can instead limit access to the database instances by specifying the NAT IP addresses.</p>
1. Click **Create**. 

### Create Databases

1. From the **Instances** page, select the database instance you just created. 
1. Select the **Databases** tab. 
1. Use the **Create database** button to create the following databases: 
  * `account`
  * `app_usage_service`
  * `autoscale`
  * `ccdb`
  * `console`
  * `diego`
  * `locket`
  * `networkpolicyserver`
  * `nfsvolume`
  * `notifications`
  * `routing`
  * `silk`
  * `uaa`
1. Select the **USERS** tab. 
1. Use the **Create user account** button to create a unique username and password for each database you created above. For **Host name**, select **Allow any host**. You must create a total of 13 user accounts. 

## <a id="buckets"></a>Step 7: Create Storage Buckets ##

1. From the GCP Console, select **Storage** > **Browser**.
1. Using **CREATE BUCKET**, create buckets with the following names. For **Default storage class**, select **Multi-Regional**:
  * `MY-PCF-buildpacks`
  * `MY-PCF-droplets`
  * `MY-PCF-packages`
  * `MY-PCF-resources`

    
## <a id="http_loadbalancers"></a>Step 8: Create HTTP Load Balancer ##

### Create Instance Group

1. Navigate to **Compute Engine** > **Instance groups**. 
1. Click **CREATE INSTANCE GROUP**.
1. Complete the form as follows: 
  * For **Name**, enter `MY-PCF-http-lb`
  * For **Location**, select **Single-zone**. 
  * For **Zone**, select the first zone from your region.<br>
    Example: For region `us-west1`, select zone `us-west1-a`.
  * Under **Group type**, select **Unmanaged instance group**. 
  * For **Network**, select `MY-PCF-virt-net`. 
  * For **Subnetwork**, select the `MY-PCF-subnet-ert-MY-GCP-REGION` subnet that you created previously.  
  * Click **Create**. 
1. Create a second instance group with the following details:
  * **Name**: `MY-PCF-http-lb`
  * **Location**: **Single-zone**
  * **Zone**: Select the second zone from your region.<br>
    Example: For region `us-west1`, select zone `us-west1-b`.
  * **Group type**: Select **Unmanaged instance group**. 
  * **Network**: Select `MY-PCF-virt-net`. 
  * **Subnetwork**: Select the `MY-PCF-subnet-ert-MY-GCP-REGION` subnet that you created previously.  
1. Create a third instance group with the following details:
  * **Name**: `MY-PCF-http-lb`
  * **Location**: **Single-zone**
  * **Zone**: Select the third zone from your region.<br>
    Example: For region `us-west1`, select zone `us-west1-c`.
  * **Group type**: Select **Unmanaged instance group**. 
  * **Network**: Select `MY-PCF-virt-net`. 
  * **Subnetwork**: Select the `MY-PCF-subnet-ert-MY-GCP-REGION` subnet that you created previously.  

### Create Health Check

1. Navigate to **Compute Engine** > **Health checks**. 
1. Click **CREATE HEALTH CHECK**. 
1. Complete the form as follows: 
  * **Name**: `MY-PCF-cf-public`
  * **Port**: `8080`
  * **Request path**: `/health`
  * **Check interval**: `30`
  * **Timeout**: `5`
  * **Healthy threshold**: `10`
  * **Unhealthy threshold**: `2`
1. Click **Create**. 

### Configure Backend

1. Navigate to **Network services** > **Load balancing**. 
1. Click **CREATE LOAD BALANCER**. 
1. Under **HTTP(S) Load Balancing**, click the **Start configuration** button.
1. For the **Name**, enter `MY-PCF-global-pcf`. 
1. Select **Backend configuration**
  1. From the dropdown, select **Backend services** > **Create a backend service**. 
  1. Complete the form as follows:
    * **Name**: `MY-PCF-http-lb-backend`. 
    * **Protocol**: `HTTP`.
    * **Named port**: `http`.
    * **Timeout**: `10 seconds`.  
    * Under **Backends** > **New backend**, select the **Instance group** that corresponds to the first zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-a`. Click **Done**.
    * Click **Add backend**, select the **Instance group** that corresponds to the second zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-b`. Click **Done**.
    * Click **Add backend**, select the **Instance group** that corresponds to the third zone of the multi-zone instance group you created. For example: `MY-PCF-http-lb-us-west1-c`. Click **Done**.
    * **Health check**: Select the `MY-PCF-cf-public` health check that you created.  
    * **Cloud CDN**: Ensure Cloud CDN is disabled. 
 1. Click **Create**. 

### Configure Frontend

1. Click **Host and path rules** to populate the default fields and a green check mark.

1. Select **Frontend configuration**, and add the following:
   * **Name**: `MY-PCF-cf-lb-http`
   * **Protocol**: `HTTP`
   * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `MY-PCF-global-pcf`.
       1. Click **Reserve**.
   * **Port**: `80`

1. If you are using a trusted SSL certificate or already have a self-signed certificate, proceed to step 5. 

1. If you want to use a self-signed certificate generated during [Elastic Runtime network configuration](gcp-er-config.html#networking), skip over the next step of adding the HTTPS frontend configuration until after you generate the certificate in Elastic Runtime. After you generate the certificate, return to step 5 using the following guidelines: 
   * Copy and paste the generated contents of the **Router SSL Termination Certificate and Private Key** fields from Elastic Runtime into the public certificate and private key fields. 
   * Since you are using a self-signed certificate, do not enter a value in the **Certificate Chain** field. 

1. Click **Add Frontend IP and port** and add the following:
  * **Name**: `MY-PCF-cf-lb-https`
  * **Protocol**: `HTTPS`
  * **IP address**: Select the `MY-PCF-global-pcf` address you create for the previous **Frontend IP and Port**.
  * **Port**: `443`
  * **Certificate**: Select **Create a new certificate**. In the next dialog, perform the following steps:
     * In the **Name** field, enter a name for the certificate.
     <%= image_tag "gcp/lb_frontend_cert.png" %>
     * In the **Public key certificate** field, copy in the contents of your public certificate, or upload your certificate as a .pem file.
     * In the **Certificate chain** field, enter or upload your certificate chain in the .pem format. If you are using a self-signed certificate, you do not need to populate this field.
     * In the **Private key** field, copy in the contents or upload the .pem file of the private key for the certificate.
1. Review the completed frontend configuration. 

1. Click **Review and finalize** to verify your configuration.

1. Click **Create**.

## <a id="tcp_websockets_lb"></a> Step 9: Create TCP WebSockets Load Balancer

The load balancer for tailing logs with WebSockets for PCF on GCP operates on TCP port `443`. 

1. From the GCP Console, select **Network services > Load balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.
  <%= image_tag("gcp/create_new_lb.png") %>

1. In the **Create a load balancer** configuration screen, make the following selections:
  * Under **Internet facing or internal only**, select **From Internet to my VMs**. 
  * Under **Multiple regions or single region**, select **Single region only**.
  * Under **Connection termination**, select **No (TCP)**. 
    <%= image_tag("gcp/lb_connection_termination.png") %>

1. Click **Continue**. 

1. In the **New TCP load balancer** window, enter `MY-PCF-wss-logs` in the **Name** field.

1. Click **Backend configuration** to configure the **Backend service**: 
  <%= image_tag "gcp/tcp_websockets_backend.png" %>
  * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnets](#create_network).
  * From the **Health check** drop-down menu, create a health check with the following details:
      * **Name**: `MY-PCF-gorouter`
      * **Port**: `8080`
      * **Request path**: `/health`
      * **Check interval**: `30`
      * **Timeout**: `5`
      * **Healthy threshold**: `10`
      * **Unhealthy threshold**: `2`
  The **Backend configuration** section shows a green check mark.

1. Click **Frontend configuration** to open its configuration window and complete the fields:
 * **Protocol**: `TCP`
 * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. For name **Name** for the new static IP address and an optional description. For example, `MY-PCF-gorouter-wss`.
       1. Click **Reserve**.
 * **Port**: `443` 
1. Click **Review and finalize** to verify your configuration.
  <%= image_tag "gcp/websockets_lb_finalize.png" %>
1. Click **Create**.

## <a id="ssh_lb"></a> Step 10: Create SSH Proxy Load Balancer

1. From the GCP Console, select **Network services > Load balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.

1. Under **Internet facing or internal only**, select **From Internet to my VMs**.

1. Under **Connection termination**, select **No (TCP)**. 
  <%= image_tag("gcp/lb_connection_termination.png") %>

1. Click **Continue**. 

1. In the **New TCP load balancer** window, enter `MY-PCF-ssh-proxy` in the **Name** field.

1. Select **Backend configuration**, and enter the following field values:
   * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnet](#create_network).
   * **Backup pool**: `None`
   * **Failover ratio**: `10%`
   * **Health check**: `No health check`
<%= image_tag("gcp/ssl_lb_backend_config_complete.png") %>

1. Select **Frontend configuration**, and add the following:
   * **Protocol**: `TCP`
   * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `MY-PCF-ssh-proxy`.
       1. Click **Reserve**.
   * **Port**: `2222`

1. Optionally, review and finalize your load balancer. 

1. Click **Create**.

## <a id="tcp_lb"></a> Step 11: Create Load Balancer for TCP Router 

<p class="note"><strong>Note</strong>: This step is optional and only required if you enable TCP routing in your deployment.</p>

To create a load balancer for TCP routing in GCP, perform the following steps:

1. From the GCP Console, select **Network services > Load balancing > Create load balancer**.

1. Under **TCP Load Balancing**, click **Start configuration**.

1. Under **Connection termination**, select **No (TCP)**. Click **Continue**. 

	<%= image_tag("gcp/lb_connection_termination.png") %>

1. On the **New TCP load balancer** screen, enter a unique name for the load balancer in the **Name** field. For example, `MY-PCF-cf-tcp-lb`.

1. Select **Backend configuration**, and enter the following field values:
   * **Region**: Select the region you used to create the network in [Create a GCP Network with Subnet](#create_network).
   * From the **Health check** drop-down menu, create a health check with the following details:
      * **Name**: `MY-PCF-tcp-lb`
      * **Port**: `80`
      * **Request path**: `/health`
      * **Check interval**: `30`
      * **Timeout**: `5`
      * **Healthy threshold**: `10`
      * **Unhealthy threshold**: `2`
      * Click **Save and continue**.
 <%= image_tag("gcp/tcp_lb_backend.png") %>

1. Select **Frontend configuration**, and add the frontend IP and port entry as follows:
   * **Protocol**: `TCP`
   * **IP**: Perform the following steps:
       1. Select **Create IP address**. 
       1. Enter a **Name** for the new static IP address and an optional description. For example, `MY-PCF-cf-tcp-lb`.
       1. Click **Reserve**.
   * **Port**: `1024-65535`

	<%= image_tag("gcp/tcp_lb_frontend.png") %>

1. Click **Review and finalize** to verify your configuration.

1. Click **Create**.

## <a id='cname'></a> Step 12: Add DNS Records for Your Load Balancers ##

In this step you redirect queries for your domain to the IP addresses of your load balancers.

1. Locate the static IP addresses of the load balancers you created in [Preparing to Deploy PCF on GCP](./gcp-prepare-env.html):
    * An HTTP(S) load balancer named `MY-PCF-global-pcf`
    * A TCP load balancer for WebSockets named `MY-PCF-wss-logs`
    * A TCP load balancer named `MY-PCF-ssh-proxy`
    * A TCP load balancer named `MY-PCF-cf-tcp-lb`
    <p class="note"><strong>Note</strong>: You can locate the static IP address of each load balancer by clicking its name under <strong>Network services > Load balancing</strong> in the GCP Console.</p>

1. Log in to the DNS registrar that hosts your domain. Examples of DNS registrars include Network Solutions, GoDaddy, and Register.com.

1. Create **A records** with your DNS registrar that map domain names to the public static IP addresses of the load balancers located above:
  <table border="1" valign="top">
      <tr>
      <th>Create and map this record...</th><th>To the IP of this load balancer</th><th>Required</th>
      </tr>
      <tr>
        <td><code>\*.sys.MY-DOMAIN</code><br>
        Example: <code>\*.sys.example.com</code></td>
        <td><code>MY-PCF-global-pcf</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>\*.apps.MY-DOMAIN</code><br>
        Example: <code>\*.apps.example.com</code></td>
        <td><code>MY-PCF-global-pcf</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>doppler.sys.MY-DOMAIN</code>
        <br>
        Example: <code>doppler.sys.example.com</code></td>
        <td><code>MY-PCF-wss-logs</code></td>
        <td>Yes</td>
      </tr>
            <tr>
        <td><code>loggregator.sys.MY-DOMAIN</code><br>
        Example: <code>loggregator.sys.example.com</code></td>
        <td><code>MY-PCF-wss-logs</code></td>
        <td>Yes</td>
      </tr>
      <tr>
        <td><code>ssh.sys.MY-DOMAIN</code>
        <br>
        Example: <code>ssh.sys.example.com</code></td>
        <td><code>MY-PCF-ssh-proxy</code></td>
        <td>Yes, to allow SSH access to apps</td>
      </tr>
      <tr>
        <td><code>tcp.MY-DOMAIN</code>
        <br>
        Example: <code>tcp.example.com</code></td>
        <td><code>MY-PCF-cf-tcp-lb</code></td>
        <td>No, only set up if you have enabled the TCP routing feature</td>
      </tr>
    </table>

1. Save changes within the web interface of your DNS registrar.

1. In a terminal window, run the following `dig` command to confirm that you created your A record successfully:

    <pre class='terminal'>dig xyz.EXAMPLE.COM</pre>

    You should see the A record that you just created:
    <pre class='terminal'>
;; ANSWER SECTION:
xyz.EXAMPLE.COM.      1767    IN  A 203.0.113.1</pre>

## <a id="next"></a> What to Do Next ###

* (Optional) To save time during the final stage of the installation process, you can start downloading the Elastic Runtime tile. See [Step 1: Download the Elastic Runtime Tile](./gcp-er-config.html#download-er) of the _Deploying Elastic Runtime on GCP_ topic.

* Proceed to the next step in the deployment, [Launching an Ops Manager Director Instance on GCP](./gcp-om-deploy.html). 

