You only need to configure this section if you have selected <strong>Internal Databases - MySQL</strong> in the <strong>Databases</strong> section.

<p class="note"><strong>Note</strong>: By default, <code>mysql</code> clients are not allowed to connect as administrator to internal MySQL instances from remote hosts. Administrators must <code>bosh ssh</code> into each internal MySQL VM to connect as the MySQL super user. This affects the admin and roadmin accounts.</p>

1. Select **Internal MySQL**. 

1. In the **MySQL Proxy IPs** field, enter one or more comma-delimited IP addresses that are not in the reserved CIDR range of your network. If a MySQL node fails, these proxies re-route connections to a healthy node. See the [MySQL Proxy](http://docs.pivotal.io/p-mysql/1-9/proxy.html) topic for more information.</p>
	<%= image_tag("mysql-config.png") %>

	<p class="note"><strong>Note</strong>: In order for operators to achieve complete high-availability, they must configure a load balancer.</p>

1. For **MySQL Service Hostname**, enter an IP address or hostname for your load balancer. If a MySQL proxy fails, the load balancer re-routes connections to a healthy proxy. If you leave this field blank, components are configured with the IP address of the first proxy instance entered above.

1. In the **Replication canary time period** field, leave the default of 30 seconds or modify the value based on the needs of your deployment. Lower numbers cause the canary to run more frequently, which means that the canary reacts more quickly to replication failure but adds load to the database.

1. In the **Replication canary read delay** field, leave the default of 20 seconds or modify the value based on the needs of your deployment. This field configures how long the canary waits, in seconds, before verifying that data is replicating across each MySQL node. Clusters under heavy load can experience a small replication lag as write-sets are committed across the nodes.

1. (**Required**): In the **E-mail address** field, enter the email address where the MySQL service sends alerts when the cluster experiences a replication issue or when a node is not allowed to auto-rejoin the cluster. 

1. To prohibit the creation of command line history files on the MySQL nodes, deselect the **Allow Command History** checkbox.

1. For **Cluster Probe Timeout**, enter the maximum amount of time, in seconds, that a new node will search for existing cluster nodes. If left blank, the default value is 10 seconds.

	<%= image_tag("mysql-replication-canary.png") %>

1. Under **Automated Backups Configuration**, choose one of five options for MySQL backups:
  * **Disable automatic backups of MySQL** disables automatic backups, but you can still deploy the Backup Prepare Node if you use BOSH Backup and Restore to back up your MySQL database. For more information, see the [Backing Up Pivotal Cloud Foundry with BBR](./backup-restore/backup-pcf-bbr.html) topic.
  * **Enable automated backups from MySQL to an S3 bucket or other S3-compatible file store** saves your backups to an existing Amazon Web Services (AWS) or <a href="http://ceph.com/">Ceph</a> S3-compatible blobstore.
		<%= image_tag("mysql-backups-s3.png") %>
		This option requires the following fields:
		* For **S3 Bucket Name**, enter the name of your S3 bucket. Do not include an `s3://` prefix, a trailing `/`, or underscores. If the bucket does not already exist, it will be created automatically.
		* For **Bucket Path**, specify a folder within the bucket to hold your MySQL backups. Do not include a trailing `/`.
		* For **S3 Bucket Region**, enter the AWS region where the bucket is located, such as `us-east-1`.
		* For **AWS Access Key ID** and **AWS Secret Access Key**, enter your AWS or Ceph credentials.
		* For **Cron Schedule**, enter a valid [cron](https://godoc.org/github.com/robfig/cron) expression to schedule your automated backups. Cron uses your computer's local time zone.
		* Enable **Backup All Nodes** to make unique backups from each instance of the MySQL server rather than just the first MySQL server instance.
  * **Enable automated backups from MySQL to Google Cloud Storage** saves your backups to Google Cloud Storage.
		<%= image_tag("mysql-backups-gcs.png") %>
		This option requires the following fields:
		* For **GCP Service Account Key JSON**, enter the name of a Google Cloud Platform (GCP) service account key with access to the project and bucket specified below. This key must be in JSON format.
		* For **GCP Project ID**, enter the project ID of your GCP project. You can find the project ID on the Dashboard of the GCP Console. 
		* For **GCP Storage Bucket Name**, enter the name of a bucket in Google Cloud Storage where your backups will be uploaded. If the bucket does not already exist, it will be created automatically.
		* For **Cron Schedule**, enter a valid [cron](https://godoc.org/github.com/robfig/cron) expression to schedule your automated backups. Cron uses your computer's local time zone.
		* Enable **Backup All Nodes** to make unique backups from each instance of the MySQL server rather than just the first MySQL server instance.
  * **Enable automated backups from MySQL to Azure** saves your backups to Azure.
		<%= image_tag("mysql-backups-azure.png") %>
		This option requires the following fields:
		* For **Azure Storage Account**, enter the name of an existing Azure storage account where backups will be uploaded. For more information about creating and managing an Azure storage account, see the [Azure documentation](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account).
		* For **Azure Storage Access Key**, enter an Azure storage access key for the storage account.
		* For **Azure Storage Container**, enter the name of an existing Azure storage container that will store the backups.
		* For **Backup Path**, enter the path within the Azure storage container where backups will be uploaded.
		* For **Cron Schedule**, enter a valid [cron](https://godoc.org/github.com/robfig/cron) expression to schedule your automated backups. Cron uses your computer's local time zone.
		* Enable **Backup All Nodes** to make unique backups from each instance of the MySQL server rather than just the first MySQL server instance.
  * **Enable automated backups from MySQL to a remote host via SCP** saves your backups to a remote host using secure copy protocol (SCP).
		<%= image_tag("mysql-backups-scp.png") %>
		This option requires the following fields:
		* For **Hostname**, enter the name of your SCP host.
		* For **Port**, enter your SCP port. This should be the TCP port that your SCP host uses for SSH. The default port is `22`.
		* For **Username**, enter your SSH username for the SCP host.
		* For **Private key**, paste in your SSH private key.
		* For **Destination directory**, enter the directory on the SCP host where you want to save backup files.
		* For **Cron Schedule**, enter a valid [cron](https://godoc.org/github.com/robfig/cron) expression to schedule your automated backups. Cron uses your computer's local time zone.
		* Enable **Backup All Nodes** to make unique backups from each instance of the MySQL server rather than just the first MySQL server instance.
<p class="note"><strong>Note</strong>: If you choose to enable automated MySQL backups, set the number of instances for the **Backup Prepare Node** under the **Resource Config** section of the Elastic Runtime tile to `1`.</p>

1. If you want to log audit events for internal MySQL, select **Enable server activity logging** under **Server Activity Logging**.
	1. For the **Event types** field, you can enter the events you want the MySQL service to log. By default, this field includes `connect` and `query`, which tracks who connects to the system and what queries are processed. For more information, see the [Logging Events](https://mariadb.com/kb/en/mariadb/about-the-mariadb-audit-plugin/#logging-events) section of the MariaDB documentation.

		![Server Activity Logging, Load Balancer Thresholds](internal_mysql_bottom.png)

1. Enter values for the following fields:
	* **Load Balancer Healthy Threshold**: Specifies the amount of time, in seconds, to wait until declaring the MySQL proxy instance started. This allows an external load balancer time to register the instance as healthy.
	* **Load Balancer Unhealthy Threshold**: Specifies the amount of time, in seconds, that the MySQL proxy continues to accept connections before shutting down. During this period, the healthcheck reports as unhealthy to cause load balancers to fail over to other proxies. You must enter a value greater than or equal to the maximum time it takes your load balancer to consider a proxy instance unhealthy, given repeated failed healthchecks.

1. If you want to enable the MySQL interruptor feature, select the checkbox to **Prevent node auto re-join**. This feature stops all writes to the MySQL database if it notices an inconsistency in the dataset between the nodes. For more information, see the [Interruptor](http://docs.pivotal.io/p-mysql/1-10/troubleshooting.html#interruptor) section in the MySQL for PCF documentation. 

1. Click **Save**.
